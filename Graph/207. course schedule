class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        //BFS
        ArrayList[] graph=new ArrayList[numCourses];
        for(int i=0;i<numCourses;i++)
        {
            graph[i]=new ArrayList();
        }
        Queue queue=new LinkedList();
        int[] degree=new int[numCourses];
        
        for(int i=0;i<prerequisites.length;i++)
        {
            degree[prerequisites[i][0]]++;
            graph[prerequisites[i][1]].add(prerequisites[i][0]);
        }
        
        int count=0;
        for(int i=0;i<numCourses;i++)
        {
            if(degree[i]==0)
            {
                queue.add(i);
                count++;
            }
        }
        
        while(queue.size()!=0)//instead of queue!=null
        {
            int course=(int)queue.poll();
            
            for(int i=0;i<graph[course].size();i++)
            {
                int pointer=(int)graph[course].get(i);
                degree[pointer]--;
                if(degree[pointer]==0)
                {
                    queue.add(pointer);
                    count++;
                }
            }
        }
        if(count==numCourses)
        {
            return true;
        }
        return false;
    }
}
