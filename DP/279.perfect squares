class Solution {
    public int numSquares(int n) {
        //find the least number of perfect square number
        //dp solution
        //learn principle from others and write code by myself
        //when you find it s=is hard to think at first, and there may be tons of possibilities, try dp
        int[] dp=new int[n+1];
        dp[0]=0;
        if(n>0) dp[1]=1;
        for(int i=2;i<=n;i++)
        {
            int square=2;
            int min=dp[i-1]+1;
            while(square*square<=i)
            {
                min=Math.min(min,dp[i-square*square]+1);
                square++;
            }
            dp[i]=min;
        }
        return dp[n];
    }
}

// dp[0] = 0 
// dp[1] = dp[0]+1 = 1
// dp[2] = dp[1]+1 = 2
// dp[3] = dp[2]+1 = 3
// dp[4] = Min{ dp[4-1*1]+1, dp[4-2*2]+1 } 
//       = Min{ dp[3]+1, dp[0]+1 } 
//       = 1				
// dp[5] = Min{ dp[5-1*1]+1, dp[5-2*2]+1 } 
//       = Min{ dp[4]+1, dp[1]+1 } 
//       = 2
// 						.
// 						.
// 						.
// dp[13] = Min{ dp[13-1*1]+1, dp[13-2*2]+1, dp[13-3*3]+1 } 
//        = Min{ dp[12]+1, dp[9]+1, dp[4]+1 } 
//        = 2
// 						.
// 						.
// 						.
// dp[n] = Min{ dp[n - i*i] + 1 },  n - i*i >=0 && i >= 1
