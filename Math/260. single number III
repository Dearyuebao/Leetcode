/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res=new ArrayList<>();
        StringBuilder s=new StringBuilder();
        helper(root,s,res);
        return res;
    }
    
    public void helper(TreeNode root,StringBuilder s,List<String> res)
    {
        if(root==null)
        {
            return;
        }
        if(s.length()!=0)
        {
            s.append("->");
            s.append(Integer.toString(root.val));
        }
        else if(s.length()==0)
        {
            s.append(Integer.toString(root.val));
        }
        if(root.left==null&&root.right==null)
        {
            res.add(s.toString());
            return;
        }
        StringBuilder snew=new StringBuilder();
        char[] sc=s.toString().toCharArray();
        for(int i=0;i<sc.length;i++)
        {
            snew.append(sc[i]);
        }
        helper(root.left,s,res);
        helper(root.right,snew,res);
        //root2,1 null,12 5,12-125 
        //StringBuilder is object,object.clone is shadow copy
        //how to deep copy a stringbuilder type?
        
    }
}

// public List<String> binaryTreePaths(TreeNode root) {
//     List<String> answer = new ArrayList<String>();
//     if (root != null) searchBT(root, "", answer);
//     return answer;
// }
// private void searchBT(TreeNode root, String path, List<String> answer) {
//     if (root.left == null && root.right == null) answer.add(path + root.val);
//     if (root.left != null) searchBT(root.left, path + root.val + "->", answer);
//     if (root.right != null) searchBT(root.right, path + root.val + "->", answer);
// }
