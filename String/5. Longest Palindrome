// class Solution {
//     public String longestPalindrome(String s) {
//   //beats 93%
//        if(s == null || s.length() < 1) return "";
        
//         int start=0,end=0;
//         for(int i=0;i<s.length();i++)
//         {
//             int len1=expandaroundcenter(s,i,i);
//             int len2=expandaroundcenter(s,i,i+1);
//             int result=Math.max(len1,len2);
//             if(result>end-start+1)
//             {
//                 start=i-(result-1)/2;
//                 end=i+result/2;
//             }
//         }
//         return s.substring(start, end + 1);
        
//     }
   
//     private int expandaroundcenter(String s, int left, int right)
//     {
//          int L=left,R=right; 
//          while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
//             L--;
//             R++;
//         }
//         return R-L-1;
//     }
// }


//dp solution beats 38%
class Solution {
    public String longestPalindrome(String s) {
         if(s==null||s.length()==0) return "";
        // boolean[][] dp=new boolean[s.length()][s.length()];
        // int start=0,length=1;
        // for(int i=0;i<s.length();i++)
        // {
        //     dp[i][i]=true;
        // }
        // char[] sc=s.toCharArray();
        // for(int i=0;i<s.length()-1;i++)
        // {
        //     if(sc[i]==sc[i+1])
        //     {
        //         dp[i][i+1]=true;
        //         start=i;
        //         length=2;
        //     }
        //     else{
        //         dp[i][i+1]=false;
        //     }
        // }
        // for(int i=3;i<=sc.length;i++)
        // {
        //     for(int j=0;j+i-1<sc.length;j++)
        //     {
        //         if(sc[j]==sc[j+i-1]&&dp[j+1][j+i-2]==true)
        //         {
        //             dp[j][j+i-1]=true;
        //             start=j;
        //             length=i;
        //         }
        //         else{
        //             dp[j][j+i-1]=false;
        //         }
        //     }
        // }
        // return s.substring(start,start+length);
        
        //another dp solution beats 33%
//         int n = s.length();
//   String res = null;
    
//   boolean[][] dp = new boolean[n][n];
    
//   for (int i = n - 1; i >= 0; i--) {
//     for (int j = i; j < n; j++) {
//       dp[i][j] = s.charAt(i) == s.charAt(j) && (j - i < 3 || dp[i + 1][j - 1]);
            
//       if (dp[i][j] && (res == null || j - i + 1 > res.length())) {
//         res = s.substring(i, j + 1);
//       }
//     }
//   }
    
//   return res;
    }
}
