class Solution {
    public int countPrimes(int n) {
        //beats 28%
        // boolean[] primes=new boolean[n+1];
        // int count=0;
        // for(int i=2;i<n;i++)
        // {
        //     if(primes[i]==false)
        //     {
        //         count++;
        //     }
        //     for(int j=2;j*i<n;j++)
        //     {
        //         primes[j*i]=true;
        //     }
        // }
        // return count;
        
        //avoid double loop or limit loop times, sqrt, still not fast enough
//         if(n<=1)
//         {
//             return 0;
//         }
//         boolean[] primes=new boolean[n];
//         primes[0]=true;
//         primes[1]=true;
        
//         for(int i=2;i<Math.sqrt(n)+1;i++)
//         {
//             for(int j=2;j*i<n;j++)
//             {
//                 primes[j*i]=true;
//             }
//         }
        
//         int count=0;
//         for(int i=0;i<n;i++)
//         {
//             if(!primes[i])
//             {
//                 count++;
//             }
//         }
//         return count;
        
        if(n<=1)
        {
            return 0;
        }
        boolean[] primes=new boolean[n];
        primes[0]=true;
        primes[1]=true;
        
        for(int i=2;i<Math.sqrt(n);i++)
        {
            if(primes[i]) //important
            {
                continue;
            }
            for(int j=i*i;j<n;j+=i)
            {
                primes[j]=true;
            }
        }
        
        int count=0;
        for(int i=0;i<n;i++)
        {
            if(!primes[i])
            {
                count++;
            }
        }
        return count;
    
    }
}
