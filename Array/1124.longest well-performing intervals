// class Solution {
//     public int longestWPI(int[] hours) {
//         //dp?
//         //1 2 1 0 0 0 1
//         //1 1 0 0 0 0 1
//         //1 0 0 0 0 1 2
//         //0 0 0 0 0 1 1 1
//         //1 2 3 2 1 0 0 0 
//         int n=hours.length;
//         int[] order=new int[n+1];
//         int[] reorder=new int[n+1];
//         order[0]=0;
//         reorder[0]=0;
        
//         for(int i=0;i<n;i++)//n=10 
//         {
//             if(hours[i]>8)// 0 0 1 0 0 1 2 3 4 5 4 //0 1 2 3 4 5 4 3 4 3
//                 //8 12 11 9 10 10 6 7 12 8
//             {
//                 order[i+1]=order[i]+1;
//             }
//             else{
//                 order[i+1]=Math.max(order[i]-1,0);
//             }
//         }
        
//         for(int i=n-1;i>=0;i--)
//         {
//             if(hours[i]>8)
//             {
//                 reorder[n-i]=reorder[n-i-1]+1;
//             }
//             else{
//                 reorder[n-i]=Math.max(reorder[n-i-1]-1,0);
//             }
//         }
        
        
// //         //find the longest none zero sequence
//         int start=0,end=0;
//         int rs=0,re=0;
//         int max=0;
//         int point=1;
//         while(point<=n){//6 6 9 n=3 point=1 1,1 
//             start=point;//0 1 2 1 0 1 2 3 4 5 4;n=10 1,1 st=1,end=11
//             //point 2,3,4,5,6,7,8,9,10,11
//             end=point;
//             while((point<=n&&order[point]!=0)||(point+1<=n&&order[point+1]!=0&&order[point-1]!=0)||(point==1&&order[point+1]!=0&&(point+2<=n&&order[point+2]!=0)))
//             {
//                 point++;
//             }
//             end=point;
//             if(end-start>max)
//             {
//                 max=end-start;
//                 rs=start;
//                 re=end;
//             }
//             point++;
//         }
        
//         int start2=0,end2=0;
//         int rs2=0,re2=0;
//        int max2=0;
//         int point2=1;
//         while(point2<=n){
//             start2=point2;
//             end2=point2;
            
//             while((point2<=n&&reorder[point2]!=0)||(point2+1<=n&&reorder[point2+1]!=0&&reorder[point2-1]!=0)||(point2==1&&reorder[point2+1]!=0&&(point2+2<=n&&reorder[point2+2]!=0)))
                
//             {
//                 point2++;
//             }
//             end2=point2;
//             if(end2-start2>max2)
//             {
//                 max2=end2-start2;
//                 rs2=start2;
//                 re2=end2;
//             }
//             point2++;
//         }
        
//        int res=Math.max(max,max2);

//         return res;
        
//         // 9 6 6 9 9
//         // 1 0 0 1 2
//         //1 2 1 0 1
        
//         //6 6 9
//         //0 0 1
//         //1 0 0
        
//         //[8,12,7,6,10,10,9,11,12,6]
//         //0 1 0 0 
//         //re 0 1 2 3 4 5 4 3 4 3 the first <=8 should be considered
//         //[8,12,7,6,10,10,9,11,12,6,6]
//         //0 0 1 2 3 4 5 4 3 4 3
//         //
//         //0 1 2 3 4 5 4 3 2 1 
//         //6 9 9 9 9 9 4 4 4 4  the first should not be considered
//         //[8 8 9 ]
        
//         //too much corner cases my solution cannot cover
//     }
// }
class Solution{
    //my wrong reason: don't consider enough
public int longestWPI(int[] hours) {
    int n=hours.length;
    int score=0;
    int res=0;
    Map<Integer,Integer> map=new HashMap<>();
    
    for(int i=0;i<n;i++)
    {
        score+=hours[i]>8?1:-1;
        if(score>0)
        {
            res=i+1;
        }
        else{
            map.putIfAbsent(score,i);
            if(map.containsKey(score-1))
            {
                res=Math.max(res,i-map.get(score-1));
            }
        }
    }
    return res;
    }
    //9 9 6 0 6 6 9
    //score 1 res 1 2,2 1,3 0,0 -1,0 -2,0 -1,1
    //seen 0,3 -1,4 -2,5
}
