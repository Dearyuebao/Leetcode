/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;
    public Node random;

    public Node() {}

    public Node(int _val,Node _next,Node _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
    public Node copyRandomList(Node head) {
        if(head==null)
        {
            return null;
        }
        Node dummy=new Node(0);
        // dummy.next=null;
        // dummy.random=null;
        Node cur=dummy;
        Map<Node,Node> visited=new HashMap<Node,Node>();
        while(head!=null)
        {
            if(!visited.containsKey(head))
            {
                // Node headval=new Node(head.val,null,null);
                //visited.put(head,headval);
                visited.put(head,new Node(head.val));
            }
            cur.next=visited.get(head);
            if(head.random!=null)
            {
                if(!visited.containsKey(head.random))
                {
                    Node randval=new Node(head.random.val,null,null);
                    visited.put(head.random,randval);
                }
                cur.next.random=visited.get(head.random);
            }
            head=head.next;
            cur=cur.next;
        }
        return dummy.next;
    }
}
