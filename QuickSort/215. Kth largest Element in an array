// class Solution {
//     public int findKthLargest(int[] nums, int k) {
        //direct solution beats 88%
        // Arrays.sort(nums);
        // int n=nums.length;
        // return nums[n-k];
        
        //priority queue solution beats 62%
        // if(nums==null||nums.length==0||k<0)
        // {
        //     return 0;
        // }
        // PriorityQueue<Integer> pq=new PriorityQueue<>();
        // for(int num:nums)
        // {
        //     pq.offer(num);
        //     if(pq.size()>k)
        //     {
        //         pq.poll();
        //     }
        // }
        // return pq.peek();
        
        //quicksort solution
        
//     }
// }

class Solution {
    public int findKthLargest(int[] nums, int k) {
        //if(nums==null||nums.length==0)
        // {
        //     return 0;
        // }
        randomize(nums);
        int target=nums.length-k;
        
        int left=0,right=nums.length-1;
        while(left<=right)
        {
            int pivotIndex=partition(nums,left,right);
            if(target==pivotIndex)
            {
                return nums[pivotIndex];
            }
            else if(target>pivotIndex)
            {
                left=pivotIndex+1;
            }
            else{
                right=pivotIndex-1;
            }
        }
        return 0;
    }
    
    public void randomize(int[] nums)
    {
        Random rand=new Random();
        for(int i=nums.length-1;i>0;i--)
        {
            int r=rand.nextInt(i+1);
            swap(nums,i,r);
        }
    }
    
    public void swap(int[] nums,int i,int r)
    {
        int temp=nums[i];
        nums[i]=nums[r];
        nums[r]=temp;
    }
    
    public int partition(int[] nums,int left,int right)
    {
        int fast=left;
        int slow=left-1;
        int pivot=right;
        while(fast<pivot)
        {
            if(nums[fast]>nums[pivot])
            {
                fast++;
            }
            else
            {
                swap(nums,++slow,fast++);
            }
        }
        swap(nums,++slow,pivot);
        return slow;
    }
}
