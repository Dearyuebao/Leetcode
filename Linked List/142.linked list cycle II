/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        //my solution using extra spaces
        // Set<ListNode> set=new HashSet<>();
        // if(head==null||head.next==null)
        // {
        //     return null;
        // }
        // while(head!=null)
        // {
        //     if(!set.contains(head))
        //     {
        //         set.add(head);
        //         head=head.next;
        //     }
        //     else{
        //         break;
        //     }
        // }
        // return head;
        
        ListNode slow=head;
        ListNode fast=head;
        if(head==null||head.next==null)
        {
            return null;
        }
        while(fast!=null&&fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast)
            {
                while(slow!=head)
                {
                    slow=slow.next;
                    head=head.next;
                }
                return slow;
            }
        }
        return null;
    }
}
