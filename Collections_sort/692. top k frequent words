// class Solution {
//     public List<String> topKFrequent(String[] words, int k) {
//         List<String> res=new LinkedList<>();
//         Map<String,Integer> map=new HashMap<>();
//         for(int i=0;i<words.length;i++)
//         {
//             if(map.containsKey(words[i]))
//             {
//                 map.put(words[i],map.get(words[i])+1);
//             }
//             else{
//                 map.put(words[i],1);
//             }
//         }
//         PriorityQueue<Map.Entry<String, Integer>> pq = new PriorityQueue<>(
//                  (a,b) -> a.getValue()==b.getValue() ? b.getKey().compareTo(a.getKey()) : a.getValue()-b.getValue()
//         );
        
//         for(Map.Entry<String,Integer> entry:map.entrySet())
//         {
//             pq.offer(entry);
//             if(pq.size()>k)
//             {
//                 pq.poll();//每次把最小的删除
//             }
//         }
        
//         while(!pq.isEmpty())
//         {
//             res.add(0,pq.poll().getKey());//take care res.add() VS res.add(0,)
//         }
        
//         return res;
//     }
// }

class Solution{
public List<String> topKFrequent(String[] words, int k) {


		Map<String,Integer> map = new HashMap<String,Integer>();

		for(int i=0;i<words.length;i++)
		{
				map.put(words[i],map.getOrDefault(words[i],0)+1);
		}

		List<Map.Entry<String,Integer>> list = new ArrayList<Map.Entry<String,Integer>>(map.entrySet());

		Collections.sort(list,new Comparator<Map.Entry<String,Integer>>(){

				public int compare(Map.Entry<String,Integer> o1,Map.Entry<String,Integer> o2)
				{
						if(o2.getValue() == o1.getValue())
						{
								return o1.getKey().compareTo(o2.getKey());
						}
						return (o2.getValue() - o1.getValue());
				}
		});


		List<String> res = new ArrayList<String>();
		for(Map.Entry<String,Integer> temp:list )
		{
				if(k!=0)
				{
						res.add(temp.getKey());
				}
				else
				{
						break;
				}
				k--;
		}
		return res;
}
}
