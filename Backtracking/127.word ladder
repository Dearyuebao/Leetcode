class Solution{
  public int wordLadder(String beginWord,String endWord,List<String> wordList){
    Set<String> dict=new HashSet<>();
    for(String s:wordList){
      dict.add(s);
    }
    if(!dict.contains(endWord)){
      return 0;
    }
    dict.remove(beginWord);
    dict.remove(endWord);
    
    Set<String> first=new HashSet<>();
    Set<String> end=new HashSet<>();
    first.add(beginWord);
    end.add(endWord);
    int step=0;
    while(!first.isEmpty()&&!end.isEmpty()){
      step++;
      Set<String> newset=new HashSet<>();
      if(first.size()<=end.size()){
        for(String s:first){
          char[] each=s.toCharArray();
          for(int i=0;i<each.length;i++){
            char remember=each[i];
            for(int j='a';j<='z';j++){
              each[i]=(char)j;
              String changed=String.valueOf(each);
              if(end.contains(changed)) return step+1;
              if(!dict.contains(changed)) continue;
              newset.add(changed);
            }
            each[i]=remember;
          }
        }
        first=newset;
      }
      
      else if(first.size()>end.size()){
        for(String s:end){
          char[] each=s.toCharArray();
          for(int i=0;i<each.length;i++){
            char remember=each[i];
            for(int j='a';j<='z';j++){
              each[i]=(char)j;
              String changed=String.valueOf(each);
              if(first.contains(changed)) return step+1;
              if(!dict.contains(changed)) continue;
              newset.add(changed);
            }
            each[i]=remember;
          }
        }
        end=newset;
      }
    }
    return 0;
  }
}
